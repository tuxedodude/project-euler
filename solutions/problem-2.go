/* https://projecteuler.net/problem=2
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 *			1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. */

package main

import (
	"fmt"
)

const solution_number int = 4000000

func odd(n int) bool {
	return n%2 != 0
}

func simple_sum(n int) int {
	x, y, sum := 1, 1, 0

	for y < n {
		if odd(y) {
			sum += y

		}
		x, y = y, x+y
	}
	return sum
}

func fib_stream(n int, vals chan<- int) {
	x, y := 1, 1

	for y < n {
		vals <- y
		x, y = y, x+y
	}
	close(vals)
}

func async_sum(n int) int {

	vals := make(chan int)
	go fib_stream(n, vals)

	sum := 0

	for x := range vals {
		if odd(x) {
			sum += x
		}
	}
	return sum
}

func Solve(n int) int {
	return simple_sum(n)
}

func main() {
	fmt.Println(Solve(solution_number))
}
